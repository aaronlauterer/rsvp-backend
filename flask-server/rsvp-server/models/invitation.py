# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rsvp-server.models.base_model_ import Model
import re  # noqa: F401,E501
from rsvp-server import util


class Invitation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, guest: List[str]=None, rsvped: bool=None, date: datetime=None, table: bool=None, email: str=None, phone: str=None, comment: str=None):  # noqa: E501
        """Invitation - a model defined in Swagger

        :param id: The id of this Invitation.  # noqa: E501
        :type id: str
        :param guest: The guest of this Invitation.  # noqa: E501
        :type guest: List[str]
        :param rsvped: The rsvped of this Invitation.  # noqa: E501
        :type rsvped: bool
        :param date: The date of this Invitation.  # noqa: E501
        :type date: datetime
        :param table: The table of this Invitation.  # noqa: E501
        :type table: bool
        :param email: The email of this Invitation.  # noqa: E501
        :type email: str
        :param phone: The phone of this Invitation.  # noqa: E501
        :type phone: str
        :param comment: The comment of this Invitation.  # noqa: E501
        :type comment: str
        """
        self.swagger_types = {
            'id': str,
            'guest': List[str],
            'rsvped': bool,
            'date': datetime,
            'table': bool,
            'email': str,
            'phone': str,
            'comment': str
        }

        self.attribute_map = {
            'id': 'id',
            'guest': 'guest',
            'rsvped': 'rsvped',
            'date': 'date',
            'table': 'table',
            'email': 'email',
            'phone': 'phone',
            'comment': 'comment'
        }

        self._id = id
        self._guest = guest
        self._rsvped = rsvped
        self._date = date
        self._table = table
        self._email = email
        self._phone = phone
        self._comment = comment

    @classmethod
    def from_dict(cls, dikt) -> 'Invitation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The invitation of this Invitation.  # noqa: E501
        :rtype: Invitation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Invitation.


        :return: The id of this Invitation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Invitation.


        :param id: The id of this Invitation.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and not re.search('^([A-Z0-9]){7}$', id):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^([A-Z0-9]){7}$/`")  # noqa: E501

        self._id = id

    @property
    def guest(self) -> List[str]:
        """Gets the guest of this Invitation.


        :return: The guest of this Invitation.
        :rtype: List[str]
        """
        return self._guest

    @guest.setter
    def guest(self, guest: List[str]):
        """Sets the guest of this Invitation.


        :param guest: The guest of this Invitation.
        :type guest: List[str]
        """

        self._guest = guest

    @property
    def rsvped(self) -> bool:
        """Gets the rsvped of this Invitation.


        :return: The rsvped of this Invitation.
        :rtype: bool
        """
        return self._rsvped

    @rsvped.setter
    def rsvped(self, rsvped: bool):
        """Sets the rsvped of this Invitation.


        :param rsvped: The rsvped of this Invitation.
        :type rsvped: bool
        """
        if rsvped is None:
            raise ValueError("Invalid value for `rsvped`, must not be `None`")  # noqa: E501

        self._rsvped = rsvped

    @property
    def date(self) -> datetime:
        """Gets the date of this Invitation.


        :return: The date of this Invitation.
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date: datetime):
        """Sets the date of this Invitation.


        :param date: The date of this Invitation.
        :type date: datetime
        """

        self._date = date

    @property
    def table(self) -> bool:
        """Gets the table of this Invitation.


        :return: The table of this Invitation.
        :rtype: bool
        """
        return self._table

    @table.setter
    def table(self, table: bool):
        """Sets the table of this Invitation.


        :param table: The table of this Invitation.
        :type table: bool
        """

        self._table = table

    @property
    def email(self) -> str:
        """Gets the email of this Invitation.


        :return: The email of this Invitation.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this Invitation.


        :param email: The email of this Invitation.
        :type email: str
        """

        self._email = email

    @property
    def phone(self) -> str:
        """Gets the phone of this Invitation.


        :return: The phone of this Invitation.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone: str):
        """Sets the phone of this Invitation.


        :param phone: The phone of this Invitation.
        :type phone: str
        """

        self._phone = phone

    @property
    def comment(self) -> str:
        """Gets the comment of this Invitation.


        :return: The comment of this Invitation.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this Invitation.


        :param comment: The comment of this Invitation.
        :type comment: str
        """

        self._comment = comment
